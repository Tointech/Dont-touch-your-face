{"version":3,"sources":["assets/hey_sound.mp3","App.js","reportWebVitals.js","index.js"],"names":["sound","Howl","src","soundURL","TOUCHED_LABEL","App","video","useRef","classifier","canPlaySound","mobilenetModule","useState","touched","setTouched","init","a","console","log","setupCamera","mobilenet","current","knnClassifier","initNotifications","cooldown","Promise","resolve","reject","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","stream","srcObject","addEventListener","error","train","label","i","training","embedding","infer","addExample","sleep","run","predictClass","result","confidences","play","notify","body","ms","setTimeout","useEffect","on","document","title","className","ref","autoPlay","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.42eeb32a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/hey_sound.8c2f8e9b.mp3\";","import React, { useEffect, useRef, useState } from 'react';\nimport '@tensorflow/tfjs-backend-cpu';\nimport * as mobilenet from '@tensorflow-models/mobilenet'\nimport * as knnClassifier from '@tensorflow-models/knn-classifier'\nimport { Howl } from 'howler'; \nimport './App.css';\nimport { initNotifications, notify } from '@mycv/f8-notification';\nimport soundURL from './assets/hey_sound.mp3'\n\nvar sound = new Howl({\n  src: [soundURL]\n});\n\nconst NOT_TOUCH_LABEL = 'not_touch';\nconst TOUCHED_LABEL = 'touched';\nconst TRAINING_TIMES = 50;\nconst TOUCH_CONFIDENCE = 0.8;\n\nfunction App() {\n  const video = useRef();\n  const classifier = useRef();\n  const canPlaySound = useRef(true);\n  const mobilenetModule = useRef();\n  const [touched, setTouched] = useState(false);\n\n\n  const init = async () => {\n    console.log('init...');\n    await setupCamera();\n    console.log('Load camera success');\n  \n    mobilenetModule.current = await mobilenet.load();\n    \n    classifier.current = knnClassifier.create();\n  \n    console.log('Setup done');\n    console.log(\"Don't touch your face and press Train 1\");\n    \n    initNotifications({ cooldown: 3000 });\n  }\n\n  const setupCamera = () => {\n    return new Promise((resolve, reject) => {\n      navigator.getUserMedia = navigator.getUserMedia || \n      navigator.webkitGetUserMedia || \n      navigator.mozGetUserMedia || \n      navigator.msGetUserMedia;\n\n      if (navigator.getUserMedia) {\n        navigator.getUserMedia(\n          { video: true},\n          stream => {\n            video.current.srcObject = stream;\n            video.current.addEventListener('loadeddata', resolve);\n          },\n          error => reject(error)\n        );\n      } else {\n        reject();\n      }\n    });\n  }\n\n  const train = async label => {\n    console.log('Training your face');\n    for (let i = 0; i < TRAINING_TIMES; ++i) {\n      console.log('Progress...');\n\n      await training(label);     \n    }\n\n  }\n\n  /** \n   * B1: Train cho may khuon mat khong cham tay\n   * B2: Train cho may khuon mat co cham tay\n   * B3: Lay hinh anh hien tai, phan tich va so sanh voi data da hoc truoc do\n   * => Neu ma matching voi data khuon mat bi cham tay ==> Canh bao\n   */\n\n  const training = label => {\n    return new Promise(async resolve => {\n      const embedding = mobilenetModule.current.infer(\n        video.current,\n        true\n      );\n      classifier.current.addExample(embedding, label);\n      await sleep(100);\n      resolve();\n    });\n  }\n\n  const run = async () => {\n    const embedding = mobilenetModule.current.infer(\n      video.current,\n      true\n    );\n    const result = await classifier.current.predictClass(embedding);\n    \n    // console.log('Label: ', result.label);\n    // console.log('Confidences: ', result.confidences);\n    \n    if (\n      result.label === TOUCHED_LABEL &&\n      result.confidences[result.label] > TOUCH_CONFIDENCE\n    ) {\n      console.log('Touched');\n      if (canPlaySound.current) {\n        canPlaySound.current = false;\n        sound.play();\n      }\n      notify(\"Don't touch\", { body: 'You just touch your face!' });\n      setTouched(true);\n    } else {\n      console.log('Not Touch');\n      setTouched(false);\n    }\n\n    await sleep(200);\n\n    run();\n  }\n\n  const sleep = (ms = 0) => {\n    return new Promise((resolve => setTimeout(resolve, ms)))\n  }\n\n  useEffect (() => {\n    init();\n\n    sound.on('end', function(){\n      canPlaySound.current = true;\n    });\n\n    // clean up\n    return () => {\n\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // change web title\n  useEffect(() => {\n    document.title = \"Dont Touch Your Face\"\n  }, [])\n\n  return (\n    <div className={`main ${touched ? 'touched' : ''}`}>\n      <h2>Avoid touching your face while working</h2>\n      \n      <video\n        ref = {video}\n        className=\"video\"\n        autoPlay\n      />\n\n      <div className=\"control\">\n        <button className=\"btn\" onClick={() => train(NOT_TOUCH_LABEL)}>Train Not Touch</button>\n        <button className=\"btn\" onClick={() => train(TOUCHED_LABEL)}>Train Touch</button>\n        <button className=\"btn\" onClick={() => run()}>Run</button>\n      </div>\n\n      <div className=\"footer\">\n        <h5>Â©2021 Le Anh Thu</h5>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}